(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{KySO:function(_,t,n){"use strict";function o(_,t){h.options.__h&&h.options.__h(l,_,b||t),b=0;var n=l.__H||(l.__H={__:[],__h:[]});return _>=n.__.length&&n.__.push({__V:j}),n.__[_]}function e(_){return b=1,function(_,t,n){var e=o(f++,2);return e.t=_,e.__c||(e.__=[n?n(t):s(void 0,t),function(_){var t=e.t(e.__[0],_);e.__[0]!==t&&(e.__=[t,e.__[1]],e.__c.setState({}))}],e.__c=l),e.__}(s,_)}function i(){for(var _;_=w.shift();)if(_.__P)try{_.__H.__h.forEach(c),_.__H.__h.forEach(r),_.__H.__h=[]}catch(t){_.__H.__h=[],h.options.__e(t,_.__v)}}function c(_){var t=l,n=_.__c;"function"==typeof n&&(_.__c=void 0,n()),l=t}function r(_){var t=l;_.__c=_.__(),l=t}function s(_,t){return"function"==typeof t?t(_):t}n.r(t);var h=n("hosL"),a="wordlist__JhFmW";const u=({words:_})=>Object(h.h)("div",{class:a},_.map((([_,t],n)=>Object(h.h)("li",null,`#${n+1}: "${_}" - (${t} Times)`))));var f,l,p,m,d="home__It8Ue",v="column__STlE0",b=0,w=[],j=[],H=h.options.__b,O=h.options.__r,k=h.options.diffed,y=h.options.__c,E=h.options.unmount;h.options.__b=function(_){l=null,H&&H(_)},h.options.__r=function(_){O&&O(_),f=0;var t=(l=_.__c).__H;t&&(p===l?(t.__h=[],l.__h=[],t.__.forEach((function(_){_.__V=j,_.u=void 0}))):(t.__h.forEach(c),t.__h.forEach(r),t.__h=[])),p=l},h.options.diffed=function(_){k&&k(_);var t=_.__c;t&&t.__H&&(t.__H.__h.length&&(1!==w.push(t)&&m===h.options.requestAnimationFrame||((m=h.options.requestAnimationFrame)||function(_){var t,n=function(){clearTimeout(o),T&&cancelAnimationFrame(t),setTimeout(_)},o=setTimeout(n,100);T&&(t=requestAnimationFrame(n))})(i)),t.__H.__.forEach((function(_){_.u&&(_.__H=_.u),_.__V!==j&&(_.__=_.__V),_.u=void 0,_.__V=j}))),p=l=null},h.options.__c=function(_,t){t.some((function(_){try{_.__h.forEach(c),_.__h=_.__h.filter((function(_){return!_.__||r(_)}))}catch(n){t.some((function(_){_.__h&&(_.__h=[])})),t=[],h.options.__e(n,_.__v)}})),y&&y(_,t)},h.options.unmount=function(_){E&&E(_);var t,n=_.__c;n&&n.__H&&(n.__H.__.forEach((function(_){try{c(_)}catch(_){t=_}})),t&&h.options.__e(t,n.__v))};var T="function"==typeof requestAnimationFrame;t.default=()=>{const[_,t]=e([]),[n,o]=e("");return Object(h.h)("div",{class:d},Object(h.h)("div",{class:v},Object(h.h)("p",null,'Clicking "Process Text!" will make a call to the API to read in the Moby Dick text file and stop list.'),Object(h.h)("p",null,"The top 100 results will be displayed, as well as the execution time. See the GitHub repo for more context and technical details: ","   ",Object(h.h)("a",{href:"https://github.com/bmitchinson/word-counter",rel:"noreferrer noopener",target:"_blank"},"bmitchinson/word-counter")),Object(h.h)("p",null,"Thank you for taking time to view the application 🙏 ","\n",Object(h.h)("a",{href:"https://mitchinson.dev",rel:"noreferrer noopener",target:"_blank"},"https://mitchinson.dev")),Object(h.h)("button",{onClick:()=>{fetch("/api/results").then((_=>_.json())).then((({data:_,timeInMs:n})=>{o(`Processed words in ${n}s`),t(_)}))}},"Process Text! 🐋"),n&&Object(h.h)("p",null,`${n}`)),Object(h.h)("div",{class:v},Object(h.h)(u,{words:_})))}}}]);
//# sourceMappingURL=route-Home.chunk.11a5f.esm.js.map